{"ast":null,"code":"var _jsxFileName = \"D:\\\\News website\\\\Front end\\\\blogapp\\\\src\\\\components\\\\CategoryComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n\n// A mock service for category operations (can be replaced with actual API calls)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockCategoryService = {\n  getCategories: async () => {\n    // Fetch existing categories (this is a mock, replace with actual API call)\n    return [\"Cooking\", \"Tech\", \"Health\", \"Sports\"];\n  },\n  addCategory: async category => {\n    // Add new category (this is a mock, replace with actual API call)\n    console.log(\"Category Added: \", category);\n  },\n  updateCategory: async (oldCategory, newCategory) => {\n    // Update category (this is a mock, replace with actual API call)\n    console.log(`Category Updated: ${oldCategory} -> ${newCategory}`);\n  },\n  deleteCategory: async category => {\n    // Delete category (this is a mock, replace with actual API call)\n    console.log(\"Category Deleted: \", category);\n  }\n};\nexport function CategoryComponent() {\n  _s();\n  const [categories, setCategories] = useState([]);\n  const [newCategory, setNewCategory] = useState(\"\");\n  const [categoryToEdit, setCategoryToEdit] = useState(\"\");\n  const [updatedCategory, setUpdatedCategory] = useState(\"\");\n\n  // Fetch categories on component mount\n  useEffect(() => {\n    const fetchCategories = async () => {\n      const data = await mockCategoryService.getCategories();\n      setCategories(data);\n    };\n    fetchCategories();\n  }, []);\n\n  // Handle adding a new category\n  const handleAddCategory = async () => {\n    if (newCategory.trim()) {\n      await mockCategoryService.addCategory(newCategory);\n      setCategories(prevCategories => [...prevCategories, newCategory]);\n      setNewCategory(\"\");\n    } else {\n      alert(\"Please enter a valid category.\");\n    }\n  };\n\n  // Handle updating a category\n  const handleUpdateCategory = async () => {\n    if (categoryToEdit && updatedCategory.trim()) {\n      await mockCategoryService.updateCategory(categoryToEdit, updatedCategory);\n      setCategories(prevCategories => prevCategories.map(category => category === categoryToEdit ? updatedCategory : category));\n      setCategoryToEdit(\"\");\n      setUpdatedCategory(\"\");\n    } else {\n      alert(\"Please select a category to update and provide a new name.\");\n    }\n  };\n\n  // Handle deleting a category\n  const handleDeleteCategory = async category => {\n    await mockCategoryService.deleteCategory(category);\n    setCategories(prevCategories => prevCategories.filter(existingCategory => existingCategory !== category));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"category-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Manage Categories\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"add-category\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newCategory,\n        onChange: e => setNewCategory(e.target.value),\n        placeholder: \"Enter new category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddCategory,\n        children: \"Add Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"update-category\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: categoryToEdit,\n        onChange: e => setCategoryToEdit(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select category to update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: category,\n          children: category\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: updatedCategory,\n        onChange: e => setUpdatedCategory(e.target.value),\n        placeholder: \"Enter updated category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpdateCategory,\n        children: \"Update Category\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Existing Categories\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: categories.map((category, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [category, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDeleteCategory(category),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(CategoryComponent, \"9amHFclMii3ma2MCZ+97bQP89tQ=\");\n_c = CategoryComponent;\nvar _c;\n$RefreshReg$(_c, \"CategoryComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","mockCategoryService","getCategories","addCategory","category","console","log","updateCategory","oldCategory","newCategory","deleteCategory","CategoryComponent","_s","categories","setCategories","setNewCategory","categoryToEdit","setCategoryToEdit","updatedCategory","setUpdatedCategory","fetchCategories","data","handleAddCategory","trim","prevCategories","alert","handleUpdateCategory","map","handleDeleteCategory","filter","existingCategory","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","index","_c","$RefreshReg$"],"sources":["D:/News website/Front end/blogapp/src/components/CategoryComponent.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\n// A mock service for category operations (can be replaced with actual API calls)\r\nconst mockCategoryService = {\r\n  getCategories: async () => {\r\n    // Fetch existing categories (this is a mock, replace with actual API call)\r\n    return [\"Cooking\", \"Tech\", \"Health\", \"Sports\"];\r\n  },\r\n  addCategory: async (category) => {\r\n    // Add new category (this is a mock, replace with actual API call)\r\n    console.log(\"Category Added: \", category);\r\n  },\r\n  updateCategory: async (oldCategory, newCategory) => {\r\n    // Update category (this is a mock, replace with actual API call)\r\n    console.log(`Category Updated: ${oldCategory} -> ${newCategory}`);\r\n  },\r\n  deleteCategory: async (category) => {\r\n    // Delete category (this is a mock, replace with actual API call)\r\n    console.log(\"Category Deleted: \", category);\r\n  },\r\n};\r\n\r\nexport function CategoryComponent() {\r\n  const [categories, setCategories] = useState([]);\r\n  const [newCategory, setNewCategory] = useState(\"\");\r\n  const [categoryToEdit, setCategoryToEdit] = useState(\"\");\r\n  const [updatedCategory, setUpdatedCategory] = useState(\"\");\r\n\r\n  // Fetch categories on component mount\r\n  useEffect(() => {\r\n    const fetchCategories = async () => {\r\n      const data = await mockCategoryService.getCategories();\r\n      setCategories(data);\r\n    };\r\n    fetchCategories();\r\n  }, []);\r\n\r\n  // Handle adding a new category\r\n  const handleAddCategory = async () => {\r\n    if (newCategory.trim()) {\r\n      await mockCategoryService.addCategory(newCategory);\r\n      setCategories((prevCategories) => [...prevCategories, newCategory]);\r\n      setNewCategory(\"\");\r\n    } else {\r\n      alert(\"Please enter a valid category.\");\r\n    }\r\n  };\r\n\r\n  // Handle updating a category\r\n  const handleUpdateCategory = async () => {\r\n    if (categoryToEdit && updatedCategory.trim()) {\r\n      await mockCategoryService.updateCategory(categoryToEdit, updatedCategory);\r\n      setCategories((prevCategories) =>\r\n        prevCategories.map((category) =>\r\n          category === categoryToEdit ? updatedCategory : category\r\n        )\r\n      );\r\n      setCategoryToEdit(\"\");\r\n      setUpdatedCategory(\"\");\r\n    } else {\r\n      alert(\"Please select a category to update and provide a new name.\");\r\n    }\r\n  };\r\n\r\n  // Handle deleting a category\r\n  const handleDeleteCategory = async (category) => {\r\n    await mockCategoryService.deleteCategory(category);\r\n    setCategories((prevCategories) =>\r\n      prevCategories.filter((existingCategory) => existingCategory !== category)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"category-container\">\r\n      <h1>Manage Categories</h1>\r\n\r\n      {/* Add New Category */}\r\n      <div className=\"add-category\">\r\n        <input\r\n          type=\"text\"\r\n          value={newCategory}\r\n          onChange={(e) => setNewCategory(e.target.value)}\r\n          placeholder=\"Enter new category\"\r\n        />\r\n        <button onClick={handleAddCategory}>Add Category</button>\r\n      </div>\r\n\r\n      {/* Update Existing Category */}\r\n      <div className=\"update-category\">\r\n        <select\r\n          value={categoryToEdit}\r\n          onChange={(e) => setCategoryToEdit(e.target.value)}\r\n        >\r\n          <option value=\"\">Select category to update</option>\r\n          {categories.map((category, index) => (\r\n            <option key={index} value={category}>\r\n              {category}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          value={updatedCategory}\r\n          onChange={(e) => setUpdatedCategory(e.target.value)}\r\n          placeholder=\"Enter updated category\"\r\n        />\r\n        <button onClick={handleUpdateCategory}>Update Category</button>\r\n      </div>\r\n\r\n      {/* List Categories with Delete Option */}\r\n      <div className=\"category-list\">\r\n        <h2>Existing Categories</h2>\r\n        <ul>\r\n          {categories.map((category, index) => (\r\n            <li key={index}>\r\n              {category}\r\n              <button onClick={() => handleDeleteCategory(category)}>\r\n                Delete\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}